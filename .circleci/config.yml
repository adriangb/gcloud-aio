version: 2.1

orbs:
  linter: talkiq/linter@1
  poetry: talkiq/poetry@2.4
  tester: talkiq/tester@4

jobs:
  # modifies poetry/run to support deprecated python versions. Changes from
  # upstream:
  # * modify base image
  # * install venv in base image
  # * include `poetry env use`
  # * pip install instead of poetry install
  #   no idea why this fixed things, maybe a similar issue to
  #   https://github.com/python-poetry/poetry/issues/3410 ?
  poetry-run-deprecated-pythons:
    docker:
      - image: thekevjames/nox:2021.10.1
    resource_class: small
    parameters:
      cmd:
        type: string
      cwd:
        type: string
      python_version:
        type: string
    steps:
      - run: apt-get update -qy
      - run: apt-get install -qy python3.8-venv
      - poetry/install
      - checkout
      - run:
          command: poetry env use <<parameters.python_version>>
          working_directory: <<parameters.cwd>>
      - run:
          command: |
            poetry install --no-root
            poetry run pip install .
          working_directory: <<parameters.cwd>>
      - run:
          command: poetry run <<parameters.cmd>>
          working_directory: <<parameters.cwd>>

  nox:
    docker:
      - image: thekevjames/nox:2021.10.1
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /key.json
    parameters:
      folder:
        type: string
    steps:
      - run: |
          apt-get -qy update
          apt-get -qy install libssl-dev
      - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
      - checkout
      - run: nox -f <<parameters.folder>>/noxfile.py

  nox-rest:
    docker:
      - image: thekevjames/nox:2021.10.1
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /key.json
    parameters:
      folder:
        type: string
    steps:
      - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > ${GOOGLE_APPLICATION_CREDENTIALS}
      - attach_workspace:
          at: rest
      - run: python3 -m pip install future==0.18.2
      - run: nox -f rest/<<parameters.folder>>/noxfile.py

  docs:
    docker:
      - image: python:3.9.9
    steps:
      - run: pip install pdoc3
      - run:
          name: patch pdoc
          command: |
            sed -i -re 's/(at 0x\\.*)$/\1\n            else:\n                from enum import Enum\n                if isinstance(p.default, Enum):\n                    replacement = str(p.default)/' /usr/local/lib/python3.9/site-packages/pdoc/__init__.py
      - checkout
      - attach_workspace:
          at: rest
      - run:
          name: install all sub-projects (aio)
          command: |
            pip install ./auth
            pip install ./bigquery
            pip install ./datastore
            pip install ./kms
            pip install ./pubsub
            pip install ./storage
            pip install ./taskqueue
      - run:
          name: install all sub-projects (rest)
          command: |
            cd rest/
            pip install ./auth
            pip install ./bigquery
            pip install ./datastore
            pip install ./kms
            pip install ./pubsub
            pip install ./storage
            pip install ./taskqueue
      - run: pdoc --html -o ./docs gcloud
      - persist_to_workspace:
          root: docs
          paths: gcloud

  pages:
    docker:
      - image: node:17.6.0
    steps:
      - checkout
      - attach_workspace:
          at: docs
      - run: npm install -g --silent gh-pages@2.0.1
      - run:
          name: configure git creds
          command: |
            git config user.email "voiceai-eng+ci@dialpad.com"
            git config user.name "Vi Eng (CI)"
      - add_ssh_keys:
          fingerprints:
            - "f6:b5:5d:10:ed:5d:cd:e0:83:28:dd:39:8c:f8:0b:c3"
      - run: gh-pages --message "[skip ci] updated docs" --dist docs/gcloud

  pypi:
    docker:
      - image: python:3.9.9-slim
    steps:
      - run: pip install pyopenssl==19.0.0 twine==1.14.0
      - checkout
      - deploy:
          name: upload to pypi
          command: |
            cd "${CIRCLE_TAG%-*}"
            python setup.py sdist bdist_wheel
            twine upload dist/*

  pypi-rest:
    docker:
      - image: python:3.9.9-slim
    steps:
      - run: pip install future==0.18.2 pyopenssl==19.0.0 twine==1.14.0
      - attach_workspace:
          at: rest
      - deploy:
          name: upload to pypi
          command: |
            cd "rest/${CIRCLE_TAG%-*}"
            python setup.py sdist bdist_wheel
            twine upload dist/*

  github:
    docker:
      - image: debian:buster-slim
    steps:
      - run: apt update -qy
      - run: apt install -qy hub git
      - checkout
      - run:
          name: create changelog
          command: |
            export PROJECT=$(echo "${CIRCLE_TAG}" | sed 's/-.*//')
            export PREV_RELEASE=$(git tag --sort=version:refname | grep ${PROJECT} | tail -n2 | head -n1)
            [ "${PREV_RELEASE}" = "${CIRCLE_TAG}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)
            [ -z "${PREV_RELEASE}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)

            echo "${CIRCLE_TAG}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log ${PREV_RELEASE}..${CIRCLE_TAG} --pretty=format:'- %s' | grep "${PROJECT}" >> CHANGELOG.md ||:
      - run: hub release create -FCHANGELOG.md "${CIRCLE_TAG}"

workflows:
  run-jobs:
    jobs:
      # build `-aio-*` -> `-rest-*`
      - poetry/run:
          name: build-rest
          cmd: ./bin/build-rest
          post-steps:
            - persist_to_workspace:
                root: ./build
                paths:
                - ./*
            - run:
                name: build gcloud-rest tarballs
                command: |
                  mkdir rest
                  tar cf rest/auth.tgz auth
                  tar cf rest/bigquery.tgz bigquery
                  tar cf rest/datastore.tgz datastore
                  tar cf rest/kms.tgz kms
                  tar cf rest/pubsub.tgz pubsub
                  tar cf rest/storage.tgz storage
                  tar cf rest/taskqueue.tgz taskqueue
                working_directory: build
            - store_artifacts:
                path: ./build/rest/
          filters:
            tags:
              only: /.*/

      - linter/pre-commit:
          python_version: 3.8.6  # TODO: https://github.com/PyCQA/pylint/issues/3882
          filters:
            tags:
              only: /.*/

      - tester/pipcheck:
          python_version: 3.9.0
          matrix:
            alias: pipcheck
            parameters:
              install_args: [bigquery/, datastore/, kms/, pubsub/, storage/, taskqueue/]

      # build docs
      - docs:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - build-rest
      - pages:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - docs

      # run tests
      - nox:
          name: test-<<matrix.folder>>
          matrix:
            alias: test
            parameters:
              folder: [bigquery, datastore, kms, pubsub, storage, taskqueue]
          filters:
            tags:
              only: /.*/
      - nox-rest:
          name: test-rest-<<matrix.folder>>
          matrix:
            alias: test-rest
            parameters:
              folder: [bigquery, datastore, kms, pubsub, storage, taskqueue]
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - poetry/run:
          name: test-unit-/aio/<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/unit
          matrix:
            alias: test-unit-aio
            parameters:
              cwd: [auth]
              python_version: ['3.6', '3.7', '3.8', '3.9']
      - poetry/run:
          name: test-integration-/aio/<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/integration
          pre-steps:
            - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/key.json"' >> $BASH_ENV
            - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
          matrix:
            alias: test-integration-aio
            parameters:
              cwd: [auth]
              python_version: ['3.9']
      - poetry-run-deprecated-pythons:
          name: test-unit-<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/unit
          pre-steps:
            - attach_workspace:
                at: /rest
          matrix:
            alias: test-unit-rest
            parameters:
              cwd: [/rest/auth]
              python_version: ['2.7', '3.5', '3.6', '3.7', '3.8', '3.9']
          requires:
            - build-rest
      - poetry-run-deprecated-pythons:
          name: test-integration-<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/integration
          pre-steps:
            - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/key.json"' >> $BASH_ENV
            - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
            - attach_workspace:
                at: /rest
          matrix:
            alias: test-integration-rest
            parameters:
              cwd: [/rest/auth]
              python_version: ['2.7', '3.9']
          requires:
            - build-rest

      - github:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
            - linter/pre-commit
            - pipcheck
            - test
            - test-rest

      - hold:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
           - github

      - pypi:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
            - hold
      - pypi-rest:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
            - hold
      - poetry/publish:
          context: org-global
          name: deploy-<<matrix.cwd>>
          password: $TWINE_PASSWORD
          username: $TWINE_USERNAME
          matrix:
            parameters:
              cwd: [auth]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /<<matrix.cwd>>-.*/
          requires:
            - hold
